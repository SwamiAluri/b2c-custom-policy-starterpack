name: Upload Azure AD B2C Policies

on:
  workflow_dispatch:

jobs:
  upload-policies:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install PowerShell Modules
      run: Install-Module -Name Microsoft.Graph -Force -Scope CurrentUser
      shell: pwsh

    - name: Upload Policies
      shell: pwsh
      env:
        TENANT_ID: ${{ secrets.B2C_TENANT_ID }}
        CLIENT_ID: ${{ secrets.B2C_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.B2C_CLIENT_SECRET }}
        POLICY_FOLDER: ${{ secrets.POLICY_FOLDER }}
      run: |
        $tenantId = $env:TENANT_ID
        $clientId = $env:CLIENT_ID
        $clientSecret = $env:CLIENT_SECRET
        $policyFolder = if ($env:POLICY_FOLDER) { $env:POLICY_FOLDER } else { "./policies/LocalAccounts" }

        # Acquire token
        $body = @{
          grant_type    = "client_credentials"
          scope         = "https://graph.microsoft.com/.default"
          client_id     = $clientId
          client_secret = $clientSecret
        }
        $tokenResponse = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token" -Method POST -Body $body
        $accessToken = $tokenResponse.access_token

        # List of policies to upload in order
        $policyFiles = @(
          "TrustFrameworkBase.xml",
          "TrustFrameworkExtensions.xml",
          "TrustFrameworkLocalization.xml",
          "SignUpOrSignin.xml",
          "PasswordReset.xml",
          "ProfileEdit.xml"
        )

        foreach ($file in $policyFiles) {
          $fullPath = Join-Path $policyFolder $file
          if (Test-Path $fullPath) {
            $policyId = [System.IO.Path]::GetFileNameWithoutExtension($file)
            Write-Host "Uploading $file as $policyId..."
            $uri = "https://graph.microsoft.com/beta/trustFramework/policies/$policyId/\$value"
            Invoke-RestMethod -Uri $uri -Method Put -Headers @{Authorization = "Bearer $accessToken"} -ContentType "application/xml" -InFile $fullPath
          }
        }